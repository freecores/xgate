??????        XGATE CODE:                     CPU     XGATE
00B000 003000                                 ORG     $B000
00B000 003000                                 DS.W    2       ; reserve two words at cahnnel 0
                                              ; channel 1
00B004 003004 20 1E                           DC.W    _START  ; point to start address
00B006 003006 00 7B                           DC.W    V_PTR    ; point to initial variables
002000 0F6000                                 ORG     $2000 ; with comment
002000 0F6000 -> $007B                V_PTR   EQU     123
002000 0F6000 -> $00D0                SPI0    EQU     $D0
002000 0F6000 -> $0005                SPI_CR  EQU     5
002000 0F6000 20 42                           DC.W    BACK_
002002 0F6002                                 DS.W    8
002012 0F6012 56                              DC.B    $56
002013 0F6013                                 DS.B    11
00201E 0F601E                                 ALIGN   1
00201E 0F601E                         _START
00201E 0F601E 02 F8                           TFR     R2,CCR          ; R2 = CCR
002020 0F6020 01 F9                           TFR     CCR,R1          ; CCR = R1
                                      ;empty line
002022 0F6022 41 25                           LDB     R1,(R1,#SPI_CR) ; willi
002024 0F6024 49 24                           LDW     R1,(R1,#4)
002026 0F6026 51 24                           STB     R1,(R1,#4)      ; willi
002028 0F6028 59 24                           STW     R1,(R1,#4)
00202A 0F602A 61 28                           LDB     R1,(R1,R2)
00202C 0F602C 69 28                           LDW     R1,(R1,R2)
00202E 0F602E 71 28                           STB     R1,(R1,R2)
002030 0F6030 79 28                           STW     R1,(R1,R2)
002032 0F6032 61 29                           LDB     R1,(R1,R2+)
002034 0F6034 69 29                           LDW     R1,(R1,R2+)
002036 0F6036 71 29                           STB     R1,(R1,R2+)
002038 0F6038 79 29                           STW     R1,(R1,R2+)
00203A 0F603A 61 2A                           LDB     R1,(R1,-R2)
00203C 0F603C 69 2A                           LDW     R1,(R1,-R2)
00203E 0F603E 71 2A                           STB     R1,(R1,-R2)
002040 0F6040 79 2A                           STW     R1,(R1,-R2)
002042 0F6042 03 F4                   BACK_   SEX     R3
002044 0F6044 04 F5                           PAR     R4
002046 0F6046 07 F6                           JAL     R7
002048 0F6048 01 F0                           CSEM    #1      ; semaphores
00204A 0F604A 01 F1                           CSEM    R1      ; same as above + 1
00204C 0F604C 07 F2                           SSEM    #7      ; semaphores
00204E 0F604E 07 F3                           SSEM    R7      ; same as above + 1
002050 0F6050 0C B0                           BFFO    R4,R5
002052 0F6052 0E F1                           ASR     R6,R7
002054 0F6054 0A 52                           CSL     R2,R2
002056 0F6056 0D 73                           CSR     R5,R3
002058 0F6058 0A 14                           LSL     R2,R0
00205A 0F605A 08 75                           LSR     R0,R3
00205C 0F605C 0C 56                           ROL     R4,R2
00205E 0F605E 0D D7                           ROR     R5,R6
002060 0F6060 0E 19                           ASR     R6,#1
002062 0F6062 0A 2A                           CSL     R2,#2
002064 0F6064 0D 3B                           CSR     R5,#3
002066 0F6066 0A 4C                           LSL     R2,#4
002068 0F6068 08 5D                           LSR     R0,#5
00206A 0F606A 0C 6E                           ROL     R4,#6
00206C 0F606C 0D 7F                           ROR     R5,#7
00206E 0F606E 10 28                           AND     R0,R1,R2        ; bit compare R1,R2
002070 0F6070 11 4E                           OR      R1,R2,R3
002072 0F6072 12 0F                           XNOR    R2,R0,R3        ; invert R3
002074 0F6074 12 0F                           COM     R2,R3           ; as pseudo op with two operands (r2 = ~r3)
002076 0F6076 13 0F                           COM     R3              ; as pseudo op with single op    (r3 = ~r3)
002078 0F6078 18 4C                           SUB     R0,R2,R3        ; compare
00207A 0F607A 18 4C                           CMP     R2,R3           ; compare as pseudo op
00207C 0F607C 18 40                           SUB     R0,R2,R0        ; compare
00207E 0F607E 1A 0C                           NEG     R2,R3           ; as pseudo op with two operands (r3 = 0-r2)
002080 0F6080 1B 0C                           NEG     R3              ; as pseudo op with single op    (r3 = 0-r3)
002082 0F6082 18 40                           TST     R2              ; compare as pseudo op
002084 0F6084 1C B9                           SBC     R4,R5,R6
002086 0F6086 18 B9                           SBC     R0,R5,R6
002088 0F6088 18 B9                           CPC     R5,R6           ; compare as pseudo op
00208A 0F608A 1E FE                           ADD     R6,R7,R7        ; R7*2
00208C 0F608C 1B 47                           ADC     R3,R2,R1
00208E 0F608E 20 00                           BCC     *+2
002090 0F6090 22 00                           BCS     *+2
002092 0F6092 27 FF                           BEQ     *
002094 0F6094 24 00                           BNE     FWD
002096 0F6096 29 D5                   FWD     BPL     BACK_
002098 0F6098 2B D4                           BMI     BACK_
00209A 0F609A 2C 00                           BVC     *+2
00209C 0F609C 2E 00                           BVS     *+2
00209E 0F609E 30 00                           BHI     *+2
0020A0 0F60A0 32 00                           BLS     *+2
0020A2 0F60A2 34 00                           BGE     *+2
0020A4 0F60A4 38 00                           BGT     *+2
0020A6 0F60A6 3F CD                           BRA     BACK_
0020A8 0F60A8 64 BB                           BFEXT   R4,R5,R6
0020AA 0F60AA 6C BB                           BFINS   R4,R5,R6        ; clear BitField
0020AC 0F60AC 74 1B                           BFINSI  R4,R0,R6        ; set BF
0020AE 0F60AE 7C BB                           BFINSX  R4,R5,R6        ; toggle
0020B0 0F60B0 83 FE                           ANDL    R3,#$FE
0020B2 0F60B2 8B 13                           ANDH    R3,#4+(5*3)     ; 19dec = $13
0020B4 0F60B4 93 FE                           BITL    R3,#($FE+1-1)   ; $FE
0020B6 0F60B6 9B FF                           BITH    R3,#255
0020B8 0F60B8 A3 01                           ORL     R3,#~$FE        ; should be 1
0020BA 0F60BA AB 00                           ORH     R3,#~(~0)       ; should be 0
0020BC 0F60BC B3 FE                           XNORL   R3,#$FE
0020BE 0F60BE BB FE                           XNORH   R3,#~$01        ; toggle bit 0 = $FE
0020C0 0F60C0 C3 00                           SUBL    R3,#0
0020C2 0F60C2 CC 02                           SUBH    R4,#2
0020C4 0F60C4 D3 00                           CMPL    R3,#0
0020C6 0F60C6 DC 02                           CPCH    R4,#2
0020C8 0F60C8 E3 00                           ADDL    R3,#0
0020CA 0F60CA EC 02                           ADDH    R4,#2
0020CC 0F60CC F3 00                           LDL     R3,#0
0020CE 0F60CE FC 02                           LDH     R4,#2
0020D0 0F60D0 03 00                           SIF
0020D2 0F60D2 07 F7                           SIF     R7
0020D4 0F60D4 00 00                           BRK
0020D6 0F60D6 01 00                           NOP
0020D8 0F60D8 02 00                           RTS
